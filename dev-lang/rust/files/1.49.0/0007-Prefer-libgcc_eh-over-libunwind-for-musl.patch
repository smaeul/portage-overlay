From 1eb558f246269606c6d8d73824ef6b44fa10764e Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Sat, 9 Sep 2017 00:14:16 -0500
Subject: [PATCH 06/16] Prefer libgcc_eh over libunwind for musl

---
 library/unwind/src/lib.rs | 2 +-
 library/unwind/build.rs | 13 +------
 2 file changed, 2 insertion(+), 13 deletion(-)

diff --git a/library/unwind/src/lib.rs b/library/unwind/src/lib.rs
index dbdefa4..cb83404 100644
--- a/library/unwind/src/lib.rs
+++ b/library/unwind/src/lib.rs
@@ -38,7 +38,7 @@ cfg_if::cfg_if! {
 }
 
 #[cfg(target_env = "musl")]
-#[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
+#[link(name = "gcc_eh", cfg(target_feature = "crt-static"))]
 #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
 extern "C" {}
diff --git a/library/unwind/build.rs b/library/unwind/build.rs
index 24bcd40..f9720b8 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -5,17 +5,12 @@ fn main() {
     let target = env::var("TARGET").expect("TARGET was not set");
 
     if cfg!(feature = "llvm-libunwind")
-        && ((target.contains("linux") && !target.contains("musl")) || target.contains("fuchsia"))
+        && (target.contains("linux") || target.contains("fuchsia"))
     {
         // Build the unwinding from libunwind C/C++ source code.
         llvm_libunwind::compile();
     } else if target.contains("x86_64-fortanix-unknown-sgx") {
         llvm_libunwind::compile();
-    } else if target.contains("linux") {
-        // linking for Linux is handled in lib.rs
-        if target.contains("musl") {
-            llvm_libunwind::compile();
-        }
     } else if target.contains("freebsd") {
         println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("rumprun") {
@@ -143,15 +138,6 @@ mod llvm_libunwind {
             cfg.file(root.join("src").join(src));
         }
 
-        if target_env == "musl" {
-            // use the same C compiler command to compile C++ code so we do not need to setup the
-            // C++ compiler env variables on the builders
-            cfg.cpp(false);
-            // linking for musl is handled in lib.rs
-            cfg.cargo_metadata(false);
-            println!("cargo:rustc-link-search=native={}", env::var("OUT_DIR").unwrap());
-        }
-
         cfg.compile("unwind");
     }
 }

